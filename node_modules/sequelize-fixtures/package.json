{
  "_args": [
    [
      {
        "raw": "sequelize-fixtures@github:sevarubbo/sequelize-fixtures",
        "scope": null,
        "escapedName": "sequelize-fixtures",
        "name": "sequelize-fixtures",
        "rawSpec": "github:sevarubbo/sequelize-fixtures",
        "spec": "github:sevarubbo/sequelize-fixtures",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:sevarubbo/sequelize-fixtures.git",
          "sshUrl": "git+ssh://git@github.com/sevarubbo/sequelize-fixtures.git",
          "httpsUrl": "git+https://github.com/sevarubbo/sequelize-fixtures.git",
          "gitUrl": "git://github.com/sevarubbo/sequelize-fixtures.git",
          "shortcut": "github:sevarubbo/sequelize-fixtures",
          "directUrl": "https://raw.githubusercontent.com/sevarubbo/sequelize-fixtures/master/package.json"
        }
      },
      "/Users/sevav2/PhpstormProjects/promise-test"
    ]
  ],
  "_from": "sevarubbo/sequelize-fixtures",
  "_id": "sequelize-fixtures@0.6.0",
  "_inCache": true,
  "_location": "/sequelize-fixtures",
  "_phantomChildren": {
    "fs.realpath": "1.0.0",
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "minimatch": "3.0.4",
    "once": "1.4.0",
    "path-is-absolute": "1.0.1",
    "underscore.string": "2.4.0"
  },
  "_requested": {
    "raw": "sequelize-fixtures@github:sevarubbo/sequelize-fixtures",
    "scope": null,
    "escapedName": "sequelize-fixtures",
    "name": "sequelize-fixtures",
    "rawSpec": "github:sevarubbo/sequelize-fixtures",
    "spec": "github:sevarubbo/sequelize-fixtures",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:sevarubbo/sequelize-fixtures.git",
      "sshUrl": "git+ssh://git@github.com/sevarubbo/sequelize-fixtures.git",
      "httpsUrl": "git+https://github.com/sevarubbo/sequelize-fixtures.git",
      "gitUrl": "git://github.com/sevarubbo/sequelize-fixtures.git",
      "shortcut": "github:sevarubbo/sequelize-fixtures",
      "directUrl": "https://raw.githubusercontent.com/sevarubbo/sequelize-fixtures/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/sevarubbo/sequelize-fixtures.git#6aa4a7e61f1a0f55f8dca418410bd1064db2c546",
  "_shasum": "0572896412b388d4e9ae75dcec0637f3dffa7ddf",
  "_shrinkwrap": null,
  "_spec": "sequelize-fixtures@github:sevarubbo/sequelize-fixtures",
  "_where": "/Users/sevav2/PhpstormProjects/promise-test",
  "author": {
    "name": "Domas Lapinskas",
    "email": "domasx2@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/domasx2/sequelize-fixtures/issues"
  },
  "dependencies": {
    "bluebird": "^2.4.2",
    "glob": "~7.0.5",
    "js-yaml": "~2.1.0",
    "object-assign": "^4.0.1"
  },
  "description": "sequelize fixture loader",
  "devDependencies": {
    "mocha": "*",
    "sequelize": "^3.0.0",
    "should": "*",
    "sinon": "^1.14.1",
    "sqlite3": "*"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "6aa4a7e61f1a0f55f8dca418410bd1064db2c546",
  "homepage": "https://github.com/domasx2/sequelize-fixtures#readme",
  "keywords": [
    "sequelize",
    "fixtures"
  ],
  "license": "BSD",
  "main": "index.js",
  "name": "sequelize-fixtures",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/domasx2/sequelize-fixtures.svg?branch=master)](https://travis-ci.org/domasx2/sequelize-fixtures)\n\nSequelize fixtures\n==========================================\n\nThis is a simple lib to load data to database using sequelize.  \nIt is intended for easily setting up test data.  \nYaml and json formats are supported. Includes a grunt task.  \nDuplicate records are not inserted.\nAPI returns bluebird promises, but callbacks can also be used as the last argument.  \n\nTested with latest Sequelize (3.30), should work on 2.x. In v4.x.x `BelongsToMany through` logic is broken.\n\n### Install\n\n    npm install sequelize-fixtures\n\n### Test\n\n    npm test\n\n### Usage\n\n```javascript\n    const sequelize_fixtures = require('sequelize-fixtures');\n\n    //a map of [model name] : model\n    //see offical example on how to load models\n    //https://github.com/sequelize/express-example/blob/master/models/index.js\n    const models = require('./models');\n\n    //from file\n    sequelize_fixtures.loadFile('fixtures/test_data.json', models).then(function(){\n        doStuffAfterLoad();\n    });\n\n    //can use glob syntax to select multiple files\n    sequelize_fixtures.loadFile('fixtures/*.json', models).then(function(){\n        doStuffAfterLoad();\n    });\n\n    //array of files\n    sequelize_fixtures.loadFiles(['fixtures/users.json', 'fixtures/data*.json'], models).then(function(){\n        doStuffAfterLoad();\n    });\n\n    //specify file encoding (default utf8)\n    sequelize_fixtures.loadFile('fixtures/*.json', models, { encoding: 'windows-1257'}).then(function(){\n        doStuffAfterLoad();\n    });\n\n    //load fixtures inside a transaction\n    sequelize.transaction(function(tx) {\n        sequelize_fixtures.loadFile('fixtures/*.json', models, { transaction: tx}).then(doStuffAfterLoad);\n    });\n\n    //apply transform for each model being loaded\n    sequelize_fixtures.loadFile('fixtures/*.json', models, {\n        transformFixtureDataFn: function (data) {\n          if(data.createdAt\n           && data.createdAt < 0) {\n            data.createdAt = new Date((new Date()).getTime() + parseFloat(data.createdAt) * 1000 * 60);\n          }\n          return data;\n        }\n    }).then(function() {\n        doStuffAfterLoad();\n    });\n\n    //modify each model being loaded\n    sequelize_fixtures.loadFile('fixtures/*.json', models, {\n        modifyFixtureDataFn: function (data) {\n          if(!data.createdAt) {\n            data.createdAt = new Date();\n          }\n          return data;\n        }\n    }).then(function() {\n        doStuffAfterLoad();\n    });\n\n    //from array\n    var fixtures = [\n        {\n            model: 'Foo',\n            data: {\n                propA: 'bar',\n                propB: 1\n            }\n        },\n        {\n            model: 'Foo',\n            data: {\n                propA: 'baz',\n                propB: 3\n            }\n        }\n    ];\n    sequelize_fixtures.loadFixtures(fixtures, models).then(function(){\n        doStuffAfterLoad();\n    });\n```\n\n### File formats\n\n#### json\n\n```json\n    [\n        {\n            \"model\": \"Foo\",\n            \"data\": {\n                \"propA\": \"bar\",\n                \"propB\": 1\n            }\n        },\n        {\n            \"model\": \"Foo\",\n            \"data\": {\n                \"propA\": \"baz\",\n                \"propB\": 3\n            }\n        }\n    ]\n```\n\n#### yaml\n\n```yaml\n    fixtures:\n        - model: Foo\n          data:\n            propA: bar\n            propB: 1\n        - model: Foo\n          data:\n            propA: baz\n            propB: 3\n```\n\n\n#### javascript\n\n```javascript\n    module.exports = [\n        {\n            \"model\": \"Foo\",\n            \"data\": {\n                \"propA\": \"bar\",\n                \"propB\": 1\n            }\n        },\n        {\n            \"model\": \"Foo\",\n            \"data\": {\n                \"propA\": \"baz\",\n                \"propB\": 3\n            }\n        }\n    ];\n```\n\n\n### Associations\n\nYou can specify associations by providing related object id or a where clause to select associated object with. Make sure associated objects are described before associations!\n\n#### One to many\n\nAssuming\n```javascript\nCar.belongsTo(Owner);\nOwner.hasMany(Car);\n```\nAssociated entity can be mapped by providing either an id:  \n\n```json\n[\n    {\n        \"model\": \"Owner\",\n        \"data\": {\n            \"id\": 11,\n            \"name\": \"John Doe\",\n            \"city\": \"Vilnius\"\n        }\n    },\n    {\n        \"model\": \"Car\",\n        \"data\": {\n            \"id\": 203,\n            \"make\": \"Ford\",\n            \"owner\": 11\n        }\n    }\n]\n```\n\nOr a property-value map (like a 'where' object) to find the entity with:  \n\n```json\n[\n    {\n        \"model\": \"Owner\",\n        \"data\": {\n            \"name\": \"John Doe\",\n            \"city\": \"Vilnius\"\n        }\n    },\n    {\n        \"model\": \"Car\",\n        \"data\": {\n            \"make\": \"Ford\",\n            \"owner\": {\n                \"name\": \"John Doe\"\n            }\n        }\n    }\n]\n```\n\n#### Many to many\n\nAssuming\n\n```javascript\nProject.belongsToMany(Person, {through: 'peopleprojects'});\nPerson.belongsToMany(Project, {through: 'peopleprojects'});\n```\n\nAssociated entities can be mapped using the association 'as' name ('people' for Project and 'projects' for People) or 'through' table name, and providing an array of ids:\n\n```json\n[\n    {\n        \"model\":\"Person\",\n        \"data\":{\n            \"id\":122,\n            \"name\": \"Jack\",\n            \"role\": \"Developer\"\n        }\n    },\n    {\n        \"model\":\"Person\",\n        \"data\":{\n            \"id\": 123,\n            \"name\": \"John\",\n            \"role\": \"Analyst\"\n        }\n    },\n    {\n        \"model\":\"Project\",\n        \"data\": {\n            \"id\": 20,\n            \"name\": \"The Great Project\",\n            \"people\": [122, 123]\n        }\n    }\n\n]\n```\n\nOr an array of property-value mappings to find the entities with:\n\n\n```json\n[\n    {\n        \"model\":\"Person\",\n        \"data\":{\n            \"name\": \"Jack\",\n            \"role\": \"Developer\"\n        }\n    },\n    {\n        \"model\":\"Person\",\n        \"data\":{\n            \"name\": \"John\",\n            \"role\": \"Analyst\"\n        }\n    },\n    {\n        \"model\":\"Project\",\n        \"data\": {\n            \"name\": \"The Great Project\",\n            \"people\": [\n                {                        \n                    \"name\": \"Jack\"\n                },\n                {\n                    \"name\": \"John\"\n                }\n            ]\n        }\n    }\n\n]\n```\n\nIf you have a custom through model for a m2m relationship, you can set additional attributes using `_through`:\n\n```javascript\nActorsMovies = sequelize.define(\"ActorsMovies\", {\n    character: {type: DataTypes.STRING}\n});\nMovie.belongsToMany(Actor, {through: ActorsMovies});\nActor.belongsToMany(Movie, {through: ActorsMovies});\n```\n\n```json\n[\n    {\n        \"model\": \"Movie\",\n        \"data\": {\n            \"name\": \"Terminator\"      \n        }\n    },\n    {\n        \"model\": \"Actor\",\n        \"data\": {\n            \"name\": \"Arnie\",\n            \"movies\": [\n                {\n                    \"name\": \"Terminator\",\n                    \"_through\": {\n                        \"character\": \"T-80\"\n                    }\n                }\n            ]\n        }\n    }\n]\n```\n\n#### Build options, save options\n\nFor each model you can provide build options that are passed to Model.build() and save options that are passed to instance.save(), example:\n\n```json\n{\n    \"model\": \"Article\",\n    \"buildOptions\": {\n        \"raw\": true,\n        \"isNewRecord\": true\n    },\n    \"saveOptions\": {\n        \"fields\": [\"title\", \"body\"]\n    },\n    \"data\": {\n        \"title\": \"Any title\",\n        \"slug\": \"My Invalid Slug\"\n    }\n}\n\n```\n\n#### Detect duplicates based on select fields\n\nIn case you want to detect duplicates based on specific field or fields rather than all fields (for example, don't include entities with the same id, even if other fields don't match), you can speficy these fields with a 'keys' property.\n\n```json\n{\n    \"model\": \"Person\",\n    \"keys\": [\"email\"],\n    \"data\": {\n        \"name\": \"John\",\n        \"email\": \"example@example.com\"\n    }\n},\n{\n    \"model\": \"Person\",\n    \"keys\": [\"email\"],\n    \"data\": {\n        \"name\": \"Patrick\",\n        \"email\": \"example@example.com\"\n    }\n}\n\n```\nIn this example only John will be loaded\n\n\n# grunt task\n\nGruntfile.js:\n\n```javascript\n    grunt.initConfig({\n        fixtures: {\n            import_test_data: {\n                src: ['fixtures/data1.json', 'fixtures/models*.json'],\n                models: function () {  //returns mapping model name: model\n                    return require('../models')\n                },\n                options: { //specify encoding, optiona. default utf-8\n                    encoding: 'windows-1257'\n                }\n            }\n        }\n\n    });\n\n    grunt.loadNpmTasks('sequelize-fixtures');\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/domasx2/sequelize-fixtures.git"
  },
  "scripts": {
    "test": "mocha tests"
  },
  "version": "0.6.0"
}
